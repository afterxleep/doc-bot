# MCP TOOL EXECUTION PROTOCOL

## CONDITIONAL LOGIC RULES:

### Rule 1: Code Generation Detection
```
IF input_contains(write, create, implement, build, code, function, class, component, method, variable, generate, make, develop, add)
THEN execute_tool(check_project_rules, task_description)
REQUIRED: Before any code output
```

### Rule 2: Project Information Detection
```
IF input_contains(how, what, why, architecture, approach, pattern, feature, authentication, database, api, testing)
AND context_contains(this project, this codebase, here, our, [project_name])
THEN execute_tool(search_documentation, extracted_keywords)
REQUIRED: For project-specific queries
```

### Rule 3: Documentation Discovery Detection
```
IF input_contains(documentation, available, help with, capabilities, rules, standards, what exists)
THEN execute_tool(get_global_rules)
REQUIRED: For documentation overview
```

### Rule 4: Context-Specific Detection
```
IF input_contains(file, directory, working on, specific, [filename], path)
THEN execute_tool(get_relevant_docs, file_context)
REQUIRED: For file-specific work
```

### Rule 5: Document Reading Detection
```
IF input_contains(read, show, get content, full document)
OR previous_response_contains(search results)
THEN execute_tool(read_specific_document, filename)
REQUIRED: For complete document access
```

## EXECUTION ALGORITHM:

```
STEP 1: input_analysis(user_query)
STEP 2: keyword_extraction(input_analysis)
STEP 3: rule_matching(keyword_extraction)
STEP 4: tool_execution(matched_rule)
STEP 5: response_generation(tool_output)
STEP 6: validation(response, project_rules)
```

## RESPONSE PROTOCOL:

### Tool-Based Response:
1. **Execute Tool**: Call appropriate MCP tool first
2. **Parse Output**: Extract relevant information from tool response
3. **Generate Answer**: Base response on tool output only
4. **Validate**: Ensure consistency with project documentation

### Fallback Response:
1. **Context Check**: Verify if response requires project knowledge
2. **Tool Selection**: Use search_documentation if uncertain
3. **Generic Response**: Only if certain no project context needed

## VALIDATION REQUIREMENTS:

- **Tool Precedence**: Tool responses override general knowledge
- **Accuracy**: Do not add information beyond tool output
- **Completeness**: Use tools for all project-related queries
- **Consistency**: Ensure responses align with project standards

## OPERATIONAL CONSTRAINTS:

- **Custom Patterns**: Project implements non-standard practices
- **Rule Compliance**: Generated code must follow project rules
- **Documentation Authority**: Project docs are the authoritative source
- **Context Awareness**: Always consider project-specific context