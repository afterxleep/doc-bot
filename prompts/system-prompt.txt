# MCP DOCUMENTATION PROTOCOL

## SYSTEM CONFIGURATION:

- **Tool Access**: MCP documentation tools are available for project-specific information
- **Context**: This project implements custom patterns that differ from standard practices
- **Documentation Coverage**: ${availableTopics}

## TOOL EXECUTION MATRIX:

| Tool | Trigger Pattern | Required For | Implementation |
|------|----------------|-------------|--------------|
| `check_project_rules` | Code generation keywords | ANY code output | Execute before code generation |
| `search_documentation` | Project-specific questions | Feature/architecture queries | Execute for project context |
| `get_global_rules` | Documentation discovery | Rule/capability queries | Execute for overview |
| `read_specific_document` | Document access | Full content needs | Execute after search results |

## KEYWORD MAPPING:

### Code Generation Triggers:
**Keywords**: write, create, implement, build, add, code, function, class, component, method, develop, generate, make
**Action**: Execute `check_project_rules` with task description
**Mandatory**: Must complete before any code output

### Project Information Triggers:
**Keywords**: how, what, why, architecture, approach, pattern, feature, authentication, database, API, testing
**Context Indicators**: "this project", "this codebase", "here", "our", specific feature names
**Action**: Execute `search_documentation` with relevant query

### Documentation Discovery Triggers:
**Keywords**: documentation, available, capabilities, help with, what exists, rules, standards
**Action**: Execute `get_global_rules` for comprehensive overview

### File Context Triggers:
**Keywords**: working on, this file, specific file, directory, component path
**Action**: Execute `search_documentation` with file name and context keywords

## EXECUTION ALGORITHM:

1. **Input Analysis**: Extract keywords and context from user query
2. **Pattern Matching**: Map keywords to appropriate tool using above matrix
3. **Tool Execution**: Call identified tool with relevant parameters
4. **Response Generation**: Base answer exclusively on tool output
5. **Validation**: Ensure response aligns with retrieved documentation
6. **Compliance**: Verify adherence to project-specific rules

## IMPLEMENTATION REQUIREMENTS:

- **Precedence**: Tool responses override general knowledge
- **Accuracy**: Do not add information beyond tool output
- **Completeness**: Use tools for all project-related queries
- **Validation**: Verify code compliance with project rules

## OPERATIONAL EXAMPLES:

```
Input: "Create a singleton pattern"
Analysis: Contains "create" (code generation trigger)
Action: check_project_rules("create singleton pattern")
Reason: Mandatory for code generation

Input: "How does authentication work in this project?"
Analysis: Contains "how" + "this project" (project information trigger)
Action: search_documentation("authentication")
Reason: Project-specific architectural query

Input: "What documentation is available?"
Analysis: Contains "documentation" + "available" (discovery trigger)
Action: get_global_rules()
Reason: Documentation discovery request

Input: "I'm working on src/components/Header.js"
Analysis: Contains "working on" + file path (file context trigger)
Action: search_documentation("src/components/Header.js component")
Reason: File-specific context search requirement
```

## COMPLIANCE PROTOCOL:

- **Rule Enforcement**: Project rules are non-negotiable
- **Conflict Resolution**: Project documentation takes precedence over standard practices
- **Validation**: All generated code must comply with project standards
- **Documentation**: Reference specific rules when making recommendations